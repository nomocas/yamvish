

each(var, templ, emptyTempl, rql ?)

tag(name, ?attributeMap, templ1, t2, ... )				OK	

.addCustomTag(name, defautAttrMap, templ)				OK

simple interpolation with { ... }

Filter syntax : keep filters ? 

context.set({
	hello:function(){},
	myVar: true
})


_binds ? remettre binds : passer par arguments on subscribe
work on subscribe handler arguments list (remove path ? put value first)

add $env in context or $root
==> maybe associate env to context at construction 			OK
==> add $env in context

add sync flag in context for string output




NOW : 

	routedsl

	binds

	$env in context



	==> interpolable : appel a fonction ==> faire attention Ã  pas choper la fonction 









var context = new y.Context({
 $route:'/wii/hello/hooo'
})
.listenTo('bloupi', function(context, msg){
  console.log('main context receive bloupi : ', msg);
});


var v = y.view({
  myAction:function(e){
      this.set('test', true);
  }
})
.set('reu', 'wiiiii')
.route('hello', function(matched){
  this.say('bloupi', 'weeeeeeee agora vox');
  //console.log('view1 matched : ', matched);
})
//_______________________________
.text('loli {{ reu }}')
.br().br().br()
.text('route : {{ $route }}')
.div(
  y.view()
  .route('hooo', function(matched){
    //console.log('view2 matched : ', matched);
  })
  .p('route2 : {{ $route }}')
)
.button('do test', y().click('myAction'))
.suspendUntil('{{ test }}')
.div('after suspension')

HTML PARSING 


<view app:home>
	<this>
		this.route('/home')
			.set({
				  myAction:function(e){
				      this.set('test', true);
				  },
				reu:'wiiii'
			})
	</this>
	loli {{ reu }}
	<br/><br/><br/>
	route : {{ $route }}
	<div>
		<view>
			<this>
				this.route('/home')
			</this>
			<p>route2 : {{ $route }}</p>
			<button data-template="click('hello')">do test</button>
			<this>this.suspendUntil('{{ test }}')</this>
			<div>after suspession</div>
		</view>
	</div>
</view>






<if {{ foo.zoo }} >

<else>

</if>



<each foo.zoo>

<empty>

</each>

<with foo.zoo></with>
<client></client>
<server></server>

<this>
	this.exec(...)
	.click(...);
</this>




<uikit:flickity />





context.say('home:routed');								OK
context.listen('home:routed', function(msg){ 			OK
	this.push('items', msg)
});


context.deafTo ....     beans de handler

.suspendUntil('{{ $route }}')							OK-dom


Route : 
	- pattern "tout-parser" (reg-exp, own route, ...)
	- plugin own-route



app.home = y.view({
	name:'ced'
})
.route('./[$,home/$]', function(context, matched){
	context.set('searchTerm', matched.query)
		.set('page', 'home')
		.setAsync('myCollec', c3po.get('foo::bar'))
		.say('home:routed', { context:context, matched:matched });
})
.set('searchTerm', '')
.load('i18n', 'i18n::my-view-{{ $env.language }}.json')
.load('campaigns', 'campaign.search::{{ searchTerm }}')
//__________________________________________________________
.header(..., y().nav())
.section(
	y().each('myCollec', y().article(...))
	.intput('text', '{{ searchTerm }}')
)
.section(
	y().use('app:mini-profile')
	.each('campaign', y().article(...))
	.text('my name is {{ name }}')
	.div('{{ i18n.title }}')
)
.footer(...)
.set('name', 'gilles')


app.contact = function(opts){
	return this.use( 
		y.view({ opts:opts }).set(...).p(...).__yield()
	);
};






//_____________________________________________








	TODO : 
		parsing 
			from DOM
				still data-*
			from String 				OK

		 .disabled 						OK

		if('!initialised', ..., ...) 		OK

		integrate filters and expressions

		request and c3po-bridge 			OK

		model validation  					OK

		route 								OK	

		views pool 							OK		

		collection filtering view 				OK

		.client( t1, t2, ...)					OK
		.server(t1, t2, ...) 					OK

		promise management : catch end render / load 		OK
		
		mount/umount event 						OK

		y.dependent('bloupi', 'foo', function(bloupi, foo){});				OK
		

		y.applyToDOM(node | selector, template)		==> apply template on dom element (select it if selector)

		eventListeners : click(addUser(user)) : should retrieve user before feeding addUser




		Template.prototype.toContext(?context)

			==> produce context tree and apply all context's vars handling




	Should :

		rename _yamvish_binds in _binds 					OK
		rename all privates vars with _*

		for each template handler : 
		add args in queue (through done) and place inner functions outside : no more closure

	Eacher : 
		==> maybe introduce special token/tag/comment for each/filter/sort 
			=> it resolves the html/js template equivalence
		e.g. 

			<div ...>
				<h1>...</h1>
				<each:users filter="name" sort="lastname">
						

				</each>
				...
				<each:events>
					

				</each>
				...
				<todo-list:todoId  />
			</div>



	ES5/6


		arrows everywhere

		arguments manip

		simple interpolation

		classes

		...
